classdef K_importXYZ_csv2masterxlsx_test < matlab.unittest.TestCase
    %K_importXYZ_csv2masterxlsx_test < matlab.unittest.TestCase
    %
    % clear; close all; clc ; testCase = K_importXYZ_csv2masterxlsx_test; res= testCase.run;disp(res);
    %
    %TODO make code independent of absolute Excel address
    %
    % Passed on 31-May-2016 15:08:21
    % Totals:
    %    5 Passed, 0 Failed, 0 Incomplete.
    %    60.5466 seconds testing time.
    %
    % See also
    % K_importXYZ_csv2masterxlsx, K_importXYZ_csv2masterxlsx_fixture
    
    properties
        
        home;
        
        thisdir = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata');
        
        matspdir = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp');
        
        matspdirzip = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp.zip');
        
        excelpath = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp', 'kjx data summary bits.xlsx'); % a copy in the working folder
        
        csv1 = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp','kjx155_5#10_5#3_1.csv');
        
        csv2 = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp','kjx155_5#10_5#3_2.csv');
        
        csv3 = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp','kjx144_3#11_1#6_2.csv');
        
        csv4 = fullfile(fileparts(which('K_importXYZ_csv2masterxlsx_test')), ...
            'smr2mat_testdata', 'mat1_sp','kjx166_3#11_23_GABA.csv');
        
        
        %TODO csv for juxta, 16x2 probe
    end
    
    methods (Test)
        function probe16x1(testCase)
            % clear;close all;clc; testCase = K_importXYZ_csv2masterxlsx_test; disp(testCase.run('probe16x1'));
            
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            testCase.applyFixture(K_importXYZ_csv2masterxlsx_fixture);
            
            list = K_importXYZ_csv2masterxlsx(testCase.csv1, testCase.excelpath);
            
            testCase.assertEqual(list(:,1), {...
                'Q90:S105';...
                'Q106:S121';...
                'Q123:S138';...
                'Q139:S154';...
                'Q452:S467';...
                'Q468:S483';...
                'Q485:S500';...
                'Q501:S516';...
                ...
                });
            
            testCase.assertEqual(list(:,2), {...
                'kjx155b01';...
                'kjx155b02';...
                'kjx155c01';...
                'kjx155c02';...
                'kjx155n01';...
                'kjx155n02';...
                'kjx155o01';...
                'kjx155o02';...
                ...
                });
            
            
            [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{1,1});
            
            testCase.assertEqual(size(raw), [16, 3]);
            testCase.assertEqual(raw{16,1}, 1.60227674475);
            testCase.assertEqual(raw{16,2},  2.741048637);
            testCase.assertEqual(raw{16,3}, '5#10');
            
        end
        
        
        function probe16x1_injerr(testCase)
            % clear;close all;clc; testCase = K_importXYZ_csv2masterxlsx_test; disp(testCase.run('probe16x1_inj'));
            
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            testCase.applyFixture(K_importXYZ_csv2masterxlsx_fixture);
            
            % kjx144 is actually not for injection
            testCase.assertError(@() K_importXYZ_csv2masterxlsx(testCase.csv3, testCase.excelpath), ...
                'K:K_importXYZ_csv2masterxlsx:local_editExcel:isinjection:false');
            
        end
        
        function probe16x1_inj(testCase)
            % clear;close all;clc; testCase = K_importXYZ_csv2masterxlsx_test; disp(testCase.run('probe16x1_inj'));
            %
            % assuming isinjection is on columne T
            % cell references will be affected
  
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            testCase.applyFixture(K_importXYZ_csv2masterxlsx_fixture);

            %% Fake the Excel file to make isinjection true for testCase.csv3
            
            if ispc
                [status, message] = xlswrite(testCase.excelpath, ones(64, 1), 'Detail', 'T1130:T1193');
                testCase.assertEqual(status, true);
            
            elseif ismac
                if isempty(which('xlwrite'))
                    
                    error(eid('local_editExcel:no_xlwrite'),...
                        ['This function "K_importXYZ_csv2masterxlsx" requires ',...
                        '<a href="http://www.mathworks.com/matlabcentral/fileexchange/38591">',...
                        '"xlwrite"</a> on Mac, because the builtin "xlswrite" which only runs properly in PC.']);
                    
                else
                    if ~strcmp(evalc('dbtype xlwrite 1'), ...
                            sprintf('\n1     function [status, message]=xlwrite(filename,A,sheet, range)\n'))
                        
                        error(eid('local_editExcel:wrong_xlwrite'),...
                            ['You have a wrong xlwrite. This function "K_importXYZ_csv2masterxlsx" requires ',...
                            '<a href="http://www.mathworks.com/matlabcentral/fileexchange/38591-xlwrite--generate-xls-x--files-without-excel-on-mac-linux-win">',...
                            '"xlwrite"</a> on Mac, because the builtin "xlswrite" which only runs properly in PC.']);
                        
                    end
                end
                javaaddpath(fullfile(fileparts(which('xlwrite')), 'poi_library'));

                
                [status, message] = xlwrite(testCase.excelpath, ones(64, 1), 'Detail', 'T1130:T1193');

            else
               error(eid('notpcormac'),'Cannot run the test.') ;
            end
            

            list = K_importXYZ_csv2masterxlsx(testCase.csv3, testCase.excelpath);

            testCase.assertEqual(list, {...
                'Q1194:S1209', 'kjx144g01';...
                'Q1226:S1241', 'kjx144j01';...
                'U1130:W1145', 'kjx144a01';...
                'U1146:W1161', 'kjx144b01';...
                'U1162:W1177', 'kjx144c01';...
                'U1178:W1193', 'kjx144c02';...
                ...
                });
            
            
            [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{1,1});
            
            testCase.assertEqual(size(raw), [16, 3]);
            testCase.assertEqual(raw{16,1},  2.8944118285);
            testCase.assertEqual(raw{16,2},  2.15796785241);
            testCase.assertEqual(raw{16,3}, '3#11');
            
            [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{3,1});
            testCase.assertEqual(raw, ...
                repmat({2.15002435854, 2.0204158597, '3#11'}, 16, 1));
            
            
        end
        
        
        function probe16x1_import2strcut(testCase)
            % clear;close all;clc; testCase = K_importXYZ_csv2masterxlsx_test; disp(testCase.run('probe16x1_import2strcut'));
            
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            testCase.applyFixture(K_importXYZ_csv2masterxlsx_fixture);
            
            list = K_importXYZ_csv2masterxlsx(testCase.csv1, testCase.excelpath);
            
            testCase.assertEqual(list, {...
                'Q90:S105', 'kjx155b01';...
                'Q106:S121','kjx155b02';...
                'Q123:S138','kjx155c01';...
                'Q139:S154','kjx155c02';...
                'Q452:S467','kjx155n01';...
                'Q468:S483','kjx155n02';...
                'Q485:S500','kjx155o01';...
                'Q501:S516','kjx155o02';...
                ...
                });
            
            
            [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{1,1});
            
            testCase.assertEqual(size(raw), [16, 3]);
            testCase.assertEqual(raw{16,1}, 1.60227674475);
            testCase.assertEqual(raw{16,2},  2.741048637);
            testCase.assertEqual(raw{16,3}, '5#10');
            
            
            %% K_extractExcelDataForSpike2
            
            rowrange = 450:540;
            
            starttime = now;
            
            list0 = K_extractExcelDataForSpike2(testCase.excelpath, testCase.matspdir, rowrange);
            testCase.assertEqual(length(list0), 6);
            
            list = dir(fullfile(testCase.matspdir, '*_info.xlsx'));
            ind = [list(:).datenum]';... > starttime ;
            testCase.assertEqual(nnz(ind), 6);
            
            
            
            %% fake the *_info.xlsx file for testing purpose
            copyfile(fullfile(testCase.matspdir, 'kjx155n01_info.xlsx'), ...
                fullfile(testCase.matspdir, 'kjx155r01_info.xlsx'));
            
            xlswrite(fullfile(testCase.matspdir, 'kjx155r01_info.xlsx'),...
                repmat({'r01'}, 16, 1), 'B2:B17'); % has been faked for r01
            
            %% K_importExcelData2structSpike2
            
            list0 = K_importExcelData2structSpike2(testCase.matspdir, '-regexp', {'^kjx155r01@0-10(A|B)'});
            list = dir(fullfile(testCase.matspdir, '*_m.mat'));
            ind = [list(:).datenum]' > starttime ;
            testCase.assertEqual(nnz(ind), 2);
            
            S = load(fullfile(testCase.matspdir, list(1).name));
            finames = fieldnames(S);
            testCase.assertEqual(size(finames), [38, 1]);
            
            testCase.assertEqual(fieldnames(S.postEEG), {...
                'title';...
                'comment';...
                'interval';...
                'scale';...
                'offset';...
                'units';...
                'start';...
                'length';...
                'values';...
                'channumber';...
                'animal';...
                'record';...
                'dopamine';...
                'isinjection';...
                'xyzrec';...
                'xyzinj';...
                'probemode';...
                'electrode';...
                'location';...
                'note_labeledcell';...
                ...
                });
            
            testCase.assertEqual(S.postEEG.xyzrec, { [],[], ''});
            testCase.assertEqual(S.postEEG.xyzinj, { [],[], ''});
            
            testCase.assertEqual(fieldnames(S.probeA04e), {...
                'title'
                'comment';...
                'interval';...
                'start';...
                'length';...
                'values';...
                'channumber';...
                'animal';...
                'record';...
                'dopamine';...
                'isinjection';...
                'xyzrec';...
                'xyzinj';...
                'probemode';...
                'electrode';...
                'location';...
                'note_labeledcell';...
                ...
                });
            
            testCase.assertEqual(S.probeA04e.xyzrec, {...
                1.70215836679,...
                3.4416874611,...
                '5#10'});
            
            testCase.assertEqual(S.probeA04e.xyzinj, { [],[], ''});
            
            
            
            
        end
        
        function injgaba1(testCase)
            % clear;close all;clc; testCase = K_importXYZ_csv2masterxlsx_test; disp(testCase.run('injgaba1'));
            %
            %
            %TODO  an JAVA excepton occurred for e04 if ismac
            
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            testCase.applyFixture(K_importXYZ_csv2masterxlsx_fixture);
            
            list = K_importXYZ_csv2masterxlsx(testCase.csv4, testCase.excelpath);
            
            testCase.assertEqual(list, {...
                'U1278:W1293', 'kjx166b01';...
                'U1294:W1309', 'kjx166b02';...
                'U1310:W1325', 'kjx166b03';...
                'U1326:W1341', 'kjx166b04';...
                'U1342:W1357', 'kjx166b05';...
                'U1358:W1373', 'kjx166c01';...
                'U1374:W1389', 'kjx166c02';...
                'U1390:W1405', 'kjx166c03';...
                'U1406:W1421', 'kjx166d01';...
                'U1422:W1437', 'kjx166d02';...
                'U1438:W1453', 'kjx166d03';...
                'U1454:W1469', 'kjx166e01';...
                'U1470:W1485', 'kjx166e02';...
                'U1486:W1501', 'kjx166e03';...
                'U1502:W1517', 'kjx166e04';...
                'U1518:W1533', 'kjx166f01';...
                'U1534:W1549', 'kjx166f02';...
                'U1550:W1565', 'kjx166g01';...
                'U1566:W1581', 'kjx166g02';...
                'U1582:W1597', 'kjx166g03';...
                'U1598:W1613', 'kjx166g04';...
                'U1614:W1629', 'kjx166g05';...
                ...
                });

            
            for i = 1:2
                [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{i,1});
                testCase.assertEqual(raw, repmat({2.70519010949,2.46764789479, '3#11'},16,1));
            end
            
            for i = 3:6
                [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{i,1});
                testCase.assertEqual(raw, repmat({2.79491237442,3.29046630547, '3#11'},16,1));
            end            
            
            for i = 7:14
                [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{i,1});
                testCase.assertEqual(raw, repmat({2.22594217917,2.47202465807, '3#11'},16,1));
            end 
            
            for i = 15:22
                [~, ~, raw] = xlsread(testCase.excelpath, 'Detail',list{i,1});
                testCase.assertEqual(raw, repmat({2.32441778634,3.303596411, '3#11'},16,1));
            end 
            
        end
        
       
    end
    
end

