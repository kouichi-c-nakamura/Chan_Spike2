classdef K_getupdated_test < matlab.unittest.TestCase
    %K_getupdated_test < matlab.unittest.TestCase
    %
    % clear;close all;clc; testCase = K_getupdated_test; disp(testCase.run);
    %
    %
    % Passed on 24/2/2015, 18:18
    % Totals:
    %    3 Passed, 0 Failed, 0 Incomplete.
    %    1.3797 seconds testing time.
    
    properties

        home = fullfile(fileparts(which('K_getupdated_test.m')), 'K_getupdated_testdata');
        

    end
    
    methods
        function obj = K_getupdated_test()
            homedir = fullfile(fileparts(which('K_getupdated_test.m')), 'K_getupdated_testdata');
            if ~isdir(homedir)
               unzip([homedir, '.zip'], fileparts(which('K_getupdated_test.m'))) ;
            end
            
        end
        
    end
    
    methods (Test)
        

        function test_K_getupdated(testCase)
            % clear;close all;clc; testCase = K_getupdated_test; res =testCase.run('test_K_getupdated'); disp(res);


            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            dest = fullfile(testCase.home, 'dest');

            src1 = fullfile(testCase.home, 'src1-1');
            S = K_getupdated(src1, '*.mat', dest, '*_after.mat');
            testCase.verifyEmpty(S.src_updateDest);
            testCase.verifyEmpty(S.src_addDest);
            testCase.verifyEmpty(S.dest_rmDest);
            testCase.verifyEqual(S.src_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });

            src1 = fullfile(testCase.home, 'src1-2');
            S = K_getupdated(src1, '*.mat', dest, '*_after.mat');
            testCase.verifyEqual(size(S.src_updateDest), [1, 1]);
            testCase.verifyEqual(S.src_updateDest, {'B.mat'});
            testCase.verifyEqual(size(S.src_addDest), [2, 1]);
            testCase.verifyEqual(S.src_addDest, {'D.mat';...
                'E.mat'});
            testCase.verifyEmpty(S.dest_rmDest);
            testCase.verifyEqual(S.src_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                'D.mat';...
                'E.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });
            
            src1 = fullfile(testCase.home, 'src1-3');
            S = K_getupdated(src1, '*.mat', dest, '*_after.mat');
            testCase.verifyEqual(size(S.src_updateDest), [0, 0]);
            testCase.verifyEqual(size(S.src_addDest), [0, 0]);
            testCase.verifyEqual(size(S.dest_rmDest), [2, 1]);
            testCase.verifyEqual(S.dest_rmDest, {'A_after.mat';...
                'C_after.mat'});
            
            %% In case a source file was renamed after saving destination files
            src1 = fullfile(testCase.home, 'src1-4');
            S = K_getupdated(src1, '*.mat', dest, '*_after.mat');
            testCase.verifyEmpty(S.src_updateDest);
            testCase.verifyEqual(size(S.src_addDest), [1, 1]);
            testCase.verifyEqual(S.src_addDest{1}, 'D.mat');
            testCase.verifyEqual(size(S.dest_rmDest), [1, 1]);
            testCase.verifyEqual(S.dest_rmDest{1}, 'A_after.mat');
            testCase.verifyEqual(S.src_all, {...
                'B.mat';...
                'C.mat';...
                'D.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });
            
            %% only one wild card is allowed for affixes
            testCase.verifyError(@() K_getupdated(src1, '*info*.mat', dest, '*_after.mat'), ...
                'MATLAB:InputParser:ArgumentFailedValidation');
            
            testCase.verifyError(@() K_getupdated(src1, '*info*.mat|1.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:affix');
 
            testCase.verifyError(@() K_getupdated(src1, '.mat|*_*.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:negaffixC');
            
            testCase.verifyError(@() K_getupdated(src1, '.mat|*_*.mat|2.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:negaffixC');           
            
            %% if dest is empty
            src1 = fullfile(testCase.home, 'src1-1');
            dest = fullfile(testCase.home, 'dest2');
            S = K_getupdated(src1, '*.mat', dest, '*_after.mat');
            testCase.verifyEqual(S.src_addDest, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                ...
                });
            testCase.verifyEmpty(S.src_updateDest);
            testCase.verifyEmpty(S.dest_rmDest);
            testCase.verifyEqual(S.src_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                ...
                });
            testCase.verifyEmpty(S.dest_all);
            
            %% affix negation 1
            
            dest = fullfile(testCase.home, 'dest');

            src1 = fullfile(testCase.home, 'src1-1');
            S = K_getupdated(src1, '*.mat|*B.mat', dest, '*_after.mat');
            testCase.verifyEmpty(S.src_updateDest);
            testCase.verifyEmpty(S.src_addDest);
            testCase.verifyEqual(S.dest_rmDest, {'B_after.mat'});
            testCase.verifyEqual(S.src_all, {...
                'A.mat';...
                'C.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });

             
            %% affix negation 2
            
            dest = fullfile(testCase.home, 'dest');

            src1 = fullfile(testCase.home, 'src1-1');
            S = K_getupdated(src1, '*.mat|*B.mat|*C.mat', dest, '*_after.mat|C_after.mat');
            testCase.verifyEmpty(S.src_updateDest);
            testCase.verifyEmpty(S.src_addDest);
            testCase.verifyEqual(S.dest_rmDest, {'B_after.mat'});
            testCase.verifyEqual(S.src_all, {...
                'A.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                ...
                });
           
            

        end
        
        
        function test_K_getupdatedmerge(testCase)
            % clear;close all;clc; testCase = K_getupdated_test; res =testCase.run('test_K_getupdatedmerge'); disp(res);

            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            dest = fullfile(testCase.home, 'dest');

            src1 = fullfile(testCase.home, 'src1-1');
            src2 = fullfile(testCase.home, 'src2-1');

            [S] = K_getupdatedmerge(src1, '*.mat', src2, '*_info.mat', dest, '*_after.mat');
            testCase.verifyEqual(size(S.src1_updateDest), [0, 0]);
            testCase.verifyEqual(size(S.src1_addSrc2updateDest), [0, 0]);
            testCase.verifyEqual(size(S.src1_addDest), [0, 0]);
            testCase.verifyEqual(size(S.src2_rmSrc2), [0, 0]);
            testCase.verifyEqual(size(S.dest_rmDest), [0, 0]);
            % Passed on 17/02/2015, 14:23
            testCase.verifyEqual(S.src1_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                ...
                });
            testCase.verifyEqual(S.src2_all, {...
                'A_info.mat';...
                'B_info.mat';...
                'C_info.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });
            
            
            src1 = fullfile(testCase.home, 'src1-2');
            [S] = K_getupdatedmerge(src1, '*.mat', src2, '*_info.mat', dest, '*_after.mat');
            testCase.verifyEqual(S.src1_updateDest, {'B.mat'});
            testCase.verifyEqual(S.src1_addSrc2updateDest, {'D.mat';...
                'E.mat'});
            testCase.verifyEmpty(S.src1_addDest);
            testCase.verifyEmpty(S.src2_rmSrc2);
            testCase.verifyEmpty(S.dest_rmDest);
            % Passed on 17/02/2015, 14:30
            testCase.verifyEqual(S.src1_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                'D.mat';...
                'E.mat';...
                ...
                });
            testCase.verifyEqual(S.src2_all, {...
                'A_info.mat';...
                'B_info.mat';...
                'C_info.mat';...
                ...
                }); 
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });
            
            src1 = fullfile(testCase.home, 'src1-1');
            src2 = fullfile(testCase.home, 'src2-2');
            [S] = K_getupdatedmerge(src1, '*.mat', src2, '*_info.mat', dest, '*_after.mat');
            testCase.verifyEqual(S.src1_updateDest, {'B.mat'});
            testCase.verifyEmpty(S.src1_addSrc2updateDest);
            testCase.verifyEmpty(S.src1_addDest);
            testCase.verifyEqual(S.src2_rmSrc2, {'D_info.mat'});
            testCase.verifyEmpty(S.dest_rmDest);
            % Passed on 17/02/2015, 14:35
            testCase.verifyEqual(S.src1_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                ...
                });
            testCase.verifyEqual(S.src2_all, {...
                'A_info.mat';...
                'B_info.mat';...
                'C_info.mat';...
                'D_info.mat';...
                ...
                }); 
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });
           
            src1 = fullfile(testCase.home, 'src1-3');
            src2 = fullfile(testCase.home, 'src2-2');
            [S] = K_getupdatedmerge(src1, '*.mat', src2, '*_info.mat', dest, '*_after.mat');
            testCase.verifyEqual(S.src1_updateDest, {'B.mat'});
            testCase.verifyEmpty(S.src1_addSrc2updateDest);
            testCase.verifyEmpty(S.src1_addDest);
            testCase.verifyEqual(S.src2_rmSrc2, {'A_info.mat';...
                'C_info.mat';...
                'D_info.mat';...
                ...
                });
            testCase.verifyEqual(S.dest_rmDest, {'A_after.mat';...
                'C_after.mat'});
            % Passed on 17/02/2015, 14:49
            testCase.verifyEqual(S.src1_all, {...
                'B.mat';...
                ...
                });
            testCase.verifyEqual(S.src2_all, {...
                'A_info.mat';...
                'B_info.mat';...
                'C_info.mat';...
                'D_info.mat';...
                ...
                }); 
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });  
            
            src1 = fullfile(testCase.home, 'src1-2');
            src2 = fullfile(testCase.home, 'src2-3');
            [S] = K_getupdatedmerge(src1, '*.mat', src2, '*_info.mat', dest, '*_after.mat');
            testCase.verifyEqual(S.src1_updateDest, {'B.mat'});
            testCase.verifyEqual(S.src1_addSrc2updateDest, {'A.mat';...
                'D.mat';...
                'E.mat'});
            testCase.verifyEmpty(S.src1_addDest);
            testCase.verifyEmpty(S.src2_rmSrc2);
            testCase.verifyEmpty(S.dest_rmDest);    
            % Passed on 17/02/2015, 14:52
            testCase.verifyEqual(S.src1_all, {...
                'A.mat';...
                'B.mat';...
                'C.mat';...
                'D.mat';...
                'E.mat';...
                ...
                });
            testCase.verifyEqual(S.src2_all, {...
                'B_info.mat';...
                'C_info.mat';...
                ...
                }); 
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                });             
          
            %% In case a source file was renamed after saving destination files

            src1 = fullfile(testCase.home, 'src1-4');
            src2 = fullfile(testCase.home, 'src2-1');
            [S] = K_getupdatedmerge(src1, '*.mat', src2, '*_info.mat', dest, '*_after.mat');
            testCase.verifyEmpty(S.src1_updateDest);
            testCase.verifyEqual(S.src1_addSrc2updateDest, {'D.mat'});
            testCase.verifyEmpty(S.src1_addDest);
            testCase.verifyEqual(S.src2_rmSrc2, {'A_info.mat'});
            testCase.verifyEqual(S.dest_rmDest, {'A_after.mat'});
            % Passed on 17/02/2015, 14:57
            testCase.verifyEqual(S.src1_all, {...
                'B.mat';...
                'C.mat';...
                'D.mat';...
                ...
                });
            testCase.verifyEqual(S.src2_all, {...
                'A_info.mat';...
                'B_info.mat';...
                'C_info.mat';...
                ...
                }); 
            testCase.verifyEqual(S.dest_all, {...
                'A_after.mat';...
                'B_after.mat';...
                'C_after.mat';...
                ...
                }); 
        
            
            %% only one wild card is allowed for affixes
            testCase.verifyError(@() K_getupdatedmerge(src1, '*data*.mat', src2, '*_info.mat', dest, '*_after.mat'), ...
                'MATLAB:InputParser:ArgumentFailedValidation');

            testCase.verifyError(@() K_getupdatedmerge(src1, '*info*.mat|1.mat', src2, '*_info.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:affix');
 
            testCase.verifyError(@() K_getupdatedmerge(src1, '.mat|*_*.mat', src2, '*_info.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:negaffixC');
            
            testCase.verifyError(@() K_getupdatedmerge(src1, '.mat|*_*.mat|2.mat', src2, '*_info.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:negaffixC');  
            
            testCase.verifyError(@() K_getupdatedmerge(src1, '*.mat', src2, '*_info*.mat|1.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:affix');
 
            testCase.verifyError(@() K_getupdatedmerge(src1, '*.mat', src2, '_info.mat|*_info*.mat', dest, '*_after.mat'), ...
                'K:pvt_parseaffix:negaffixC');
                
            
        end
        
        
        function test_K_getupdatedf_2folders(testCase)
            % clear;close all;clc; testCase = K_getupdated_test; res =testCase.run('test_K_getupdatedf_2folders'); disp(res);

            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance;
            import matlab.unittest.TestSuite;
            
            dest = fullfile(testCase.home, 'dest');
            
            %% case 1
            
            src1 = fullfile(testCase.home, 'src1-1');
            delete(fullfile(src1, '*.txt'), fullfile(dest, '*.txt'));
            
            S = K_getupdatedf(src1, '*.mat', dest, '*_after.mat');
            
            D = dir(fullfile(src1, '*.txt'));
            N = {D(:).name}';
            fid = fopen(fullfile(src1, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            
            testCase.verifyMatches(N{1}, '^addDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            testCase.verifyMatches(N{2}, '^updateDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            delete(fullfile(src1, N{1}));
            delete(fullfile(src1, N{2}));
            
            D = dir(fullfile(dest, '*.txt'));
            N = {D(:).name}';           
            testCase.verifyMatches(N{1}, '^rmDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            delete(fullfile(dest, N{1}));
            
            %% case 2
            
            src1 = fullfile(testCase.home, 'src1-2');
            delete(fullfile(src1, '*.txt'), fullfile(dest, '*.txt'));

            S = K_getupdatedf(src1, '*.mat', dest, '*_after.mat');

            D = dir(fullfile(src1, '*.txt'));
            N = {D(:).name}';
            
            testCase.verifyMatches(N{1}, '^addDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(src1, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifyEqual(C{4}, 'D.mat');
            testCase.verifyEqual(C{5}, 'E.mat');
            delete(fullfile(src1, N{1}));

            testCase.verifyMatches(N{2}, '^updateDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(src1, N{2}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifyEqual(C{4}, 'B.mat');
            delete(fullfile(src1, N{2}));
            
            D = dir(fullfile(dest, '*.txt'));
            N = {D(:).name}';
            testCase.verifyMatches(N{1}, '^rmDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(dest, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifySize(C, [3,1]);
            delete(fullfile(dest, N{1}));
            
            %% case 3
            src1 = fullfile(testCase.home, 'src1-3');
            delete(fullfile(src1, '*.txt'), fullfile(dest, '*.txt'));
            
            S = K_getupdatedf(src1, '*.mat', dest, '*_after.mat');
            
            D = dir(fullfile(src1, '*.txt'));
            N = {D(:).name}';
            
            testCase.verifyMatches(N{1}, '^addDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(src1, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifySize(C, [3,1]);
            delete(fullfile(src1, N{1}));
            
            testCase.verifyMatches(N{2}, '^updateDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(src1, N{2}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifySize(C, [3,1]);
            delete(fullfile(src1, N{2}));
            
            D = dir(fullfile(dest, '*.txt'));
            N = {D(:).name}';
            testCase.verifyMatches(N{1}, '^rmDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(dest, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifyEqual(C{4}, 'A_after.mat');
            testCase.verifyEqual(C{5}, 'C_after.mat');
            delete(fullfile(dest, N{1}));
            
            
            %% case 4
            % In case a source file was renamed after saving destination files

            src1 = fullfile(testCase.home, 'src1-4');
            delete(fullfile(src1, '*.txt'), fullfile(dest, '*.txt'));

            S = K_getupdatedf(src1, '*.mat', dest, '*_after.mat');

            D = dir(fullfile(src1, '*.txt'));
            N = {D(:).name}';
            
            testCase.verifyMatches(N{1}, '^addDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(src1, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifySize(C, [4,1]);
            testCase.verifyEqual(C{4}, 'D.mat');
            delete(fullfile(src1, N{1}));
            
            testCase.verifyMatches(N{2}, '^updateDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(src1, N{2}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifySize(C, [3,1]);
            delete(fullfile(src1, N{2}));
            
            D = dir(fullfile(dest, '*.txt'));
            N = {D(:).name}';
            testCase.verifyMatches(N{1}, '^rmDest_\d{4}-\d{2}-\d{2}_\d{6}.txt');
            fid = fopen(fullfile(dest, N{1}));
            C = textscan(fid, '%s', 'Delimiter', '\n');
            C = C{1};
            fclose(fid);
            testCase.verifySize(C, [4,1]);
            testCase.verifyEqual(C{4}, 'A_after.mat');
            delete(fullfile(dest, N{1}));

      end
        
        
    end
    
end

